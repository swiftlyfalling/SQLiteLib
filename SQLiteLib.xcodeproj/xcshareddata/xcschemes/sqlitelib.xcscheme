<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0730"
   version = "1.7">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <PreActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Process USER configuration"
               scriptText = "#&#10;# Process USER Configuration Files&#10;#&#10;# The choice of which FILE to use is as follows:&#10;# 1. If FILE exists in the parent directory of ${SRCROOT}, it is copied to ${SRCROOT}/FILE and used, else&#10;# 2. If FILE exists in ${SRCROOT} it is used, else&#10;# 3. The example file (FILE.example) is copied to ${SRCROOT}/FILE and is used&#10;&#10;SCRIPT_INPUT_FILE_COUNT=1&#10;SCRIPT_INPUT_FILE_0=&quot;${SRCROOT}/SQLiteLib-USER.xcconfig.example&quot;&#10;&#10;copiedfiles=false&#10;for ((i=0; i &lt; SCRIPT_INPUT_FILE_COUNT ; i++))&#10;do&#10;    INFILE=SCRIPT_INPUT_FILE_$&#10;    EXAMPLEFILE=${!INFILE};&#10;    OUTPUTFILE=${EXAMPLEFILE%.example}&#10;&#10;    OUTPUTFILENAME=$(basename $OUTPUTFILE)&#10;&#10;    # Search parent directory of ${SRCROOT} for &quot;$OUTPUTFILENAME&quot; file.&#10;    # Overwrite existing output file if parent override exists.&#10;&#10;    PARENTOVERRIDE=&quot;${SRCROOT}/../${OUTPUTFILENAME}&quot;&#10;&#10;    if [ -f &quot;$PARENTOVERRIDE&quot; ]&#10;    then&#10;        # Use parent override&#10;        echo &quot;Parent USER configuration override exists - copying&quot;&#10;        cp $PARENTOVERRIDE $OUTPUTFILE&#10;        touch $OUTPUTFILE&#10;        copiedfiles=true&#10;    else&#10;        # Use .example file, if output file doesn&apos;t exist&#10;        if [ ! -f &quot;$OUTPUTFILE&quot; ];&#10;        then&#10;            echo &quot;${INFILE}=${EXAMPLEFILE}&quot;&#10;            if [ -f &quot;$EXAMPLEFILE&quot; ]&#10;            then&#10;                echo &quot;Expected USER configuration file doesn&apos;t exist&quot;&#10;                echo &quot;Copying .example file&quot;&#10;                cp $EXAMPLEFILE $OUTPUTFILE&#10;                touch $OUTPUTFILE&#10;                copiedfiles=true&#10;            else&#10;                echo &quot;Missing input .example file: ${EXAMPLEFILE}&quot;&#10;                exit 1&#10;            fi&#10;        else&#10;            echo &quot;USER Configuration file already exists: ${OUTPUTFILE}&quot;&#10;            echo &quot;Using existing file.&quot;&#10;        fi&#10;    fi&#10;done&#10;&#10;if [ &quot;$copiedfiles&quot; = true ] ; then&#10;    touch &quot;${SRCROOT}/SQLiteLib.xcconfig&quot;&#10;    sleep .5&#10;fi&#10;"
               shellToInvoke = "/bin/sh">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "D2AAC045055464E500DB518D"
                     BuildableName = "libsqlitecustom.a"
                     BlueprintName = "sqlitecustom"
                     ReferencedContainer = "container:SQLiteLib.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PreActions>
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "D2AAC045055464E500DB518D"
               BuildableName = "libsqlitecustom.a"
               BlueprintName = "sqlitecustom"
               ReferencedContainer = "container:SQLiteLib.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <Testables>
      </Testables>
      <AdditionalOptions>
      </AdditionalOptions>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "D2AAC045055464E500DB518D"
            BuildableName = "libsqlitecustom.a"
            BlueprintName = "sqlitecustom"
            ReferencedContainer = "container:SQLiteLib.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Release"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "D2AAC045055464E500DB518D"
            BuildableName = "libsqlitecustom.a"
            BlueprintName = "sqlitecustom"
            ReferencedContainer = "container:SQLiteLib.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
